package player;

import java.util.List;

import game.Board;
import player.bot.Network;

public class Bot implements Player, Comparable {
	Network model = new Network();

	public int fitness = 0;

	public Bot() {}
	public Bot(Bot copy) {
		model = new Network(copy.model);
	}
	public Bot(List<String> net) {
		model = new Network(net);
	}

	@Override
	public char getPlayerChar() {
		return 'b';
	}

	@Override
	public void takeTurn(Board board) {

		double[] input = new double[18];

		for (int x = 0; x < 3; x++) {
			for (int y = 0; y < 3; y++) {
				if (board.board[x][y] == null) {
					input[(x+y*3)*2] = 0;
					input[(x+y*3)*2+1] = 0;

				} else if (board.board[x][y].equals(this)) {
					input[(x+y*3)*2] = 1;
					input[(x+y*3)*2+1] = 0;

				} else {
					input[(x+y*3)*2] = 0;
					input[(x+y*3)*2+1] = 1;
				}
			}
		}

		double[] outputArray = model.calculate(input);

		double highest = -1;
		int output = -1;

		for (int i = 0; i < outputArray.length; i++) {
			if (board.isValid(i%3, i/3)) {
				if (output == -1) {
					highest = outputArray[i];
					output = i;
				} else if (outputArray[i] > highest) {
					highest = outputArray[i];
					output = i;
				} 
			}
		}

		board.claim(this, output%3, output/3);
	}

	@Override
	public String toString() {
		return "" + fitness;
	}

	public String saveable() {
		return model.toString();
	}

	@Override
	public int compareTo(Object o) {
		Bot bot = (Bot) o;

		return bot.fitness - this.fitness;
	}

}
