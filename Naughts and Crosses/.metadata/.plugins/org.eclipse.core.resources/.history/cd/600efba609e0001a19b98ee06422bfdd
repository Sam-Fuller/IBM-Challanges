package Train;


import interfaces.Algorithm;
import interfaces.Problem;
import player.Blocker;
import player.Bot;
import player.Player;
import player.Random;
import utils.RunAndStore.FTrend;
import utils.algorithms.cmaes.CMAEvolutionStrategy;

import static utils.MatLab.max;
import static utils.MatLab.min;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import game.Game;

/**
 * Covariance Matrix Adaptation Evolutionary Strategy 
 */
public class Covariance_matrix_adaption_evolution_strategy {
	public static void main(String[] args) {
		write("CMAES.txt", new Bot(execute(100000)).saveable());

		System.out.println("done");
	}

	private static void write(String fileName, String fileLines) {
		Path filePath = Paths.get(fileName);

		try {
			Files.write(filePath, fileLines.getBytes());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static double[] execute(int maxEvaluations) {
		int problemDimension = 432;

		double[] best = new double[problemDimension];
		double fBest = Double.NaN;

		int j = 0;

		best = generateRandomSolution(problemDimension);
		fBest = vsBlock(best);
		j++;
		
		CMAEvolutionStrategy cma = new CMAEvolutionStrategy();
		cma.setRepairMatrix(true);
		cma.setDimension(problemDimension);
		cma.setInitialX(best);
		cma.setInitialStandardDeviation(0.2);
		cma.options.verbosity = -1;
		cma.options.writeDisplayToFile = -1;


		double[] fitness = cma.init();
		double lastFitness = -2001;
		

		while (j < maxEvaluations) {
			double[][] pop = cma.samplePopulation();

			for(int i = 0; i < pop.length && j < maxEvaluations; ++i) {
				pop[i] = saturate(pop[i]);
				fitness[i] = vsBlock(pop[i]);
				
				if (fitness[i] < fBest) {
					fBest = fitness[i];
					for (int n = 0; n < problemDimension; n++)
						best[n] = pop[i][n];
				}

				j++;
			}
			
			System.out.println((fBest>lastFitness?"^":"v") + " Fitness:   " + fBest/20 + "%");
			lastFitness = fBest;

			cma.updateDistribution(fitness);
		}

		return best;
	}

	public static double[] saturate(double[] x) {
		int n = x.length;
		double[] x_sat = new double[n];
		for (int i = 0; i < n; i++)
			x_sat[i] = min(max(x[i], 0), 1);
		return x_sat;
	}

	public static double[] generateRandomSolution(int n) {
		double[] r = new double[n];

		for (int i = 0; i < n; i++) {
			r[i] = Math.random();
		}

		return r;
	}


	static final Player blockerBot = new Blocker();

	public static int vsBlock(double[] network) {
		Bot player = new Bot(network);
		int result = 0;

		for (int i = 0; i < 1000; i++) {
			result += play(player, blockerBot);
		}

		return result;
	}

	public static int play(Player player1, Player player2) {
		int result = 0;

		int result1 = Game.play(player1, player2);
		if (result1 == 1) result++;
		else if (result1 == 2) result--;

		int result2 = Game.play(player2, player1);
		if (result2 == 1) result--;
		else if (result2 == 2) result++;

		return result;
	}
}
